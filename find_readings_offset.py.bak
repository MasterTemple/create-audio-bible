import pandas as pd
import os
import re
from dataclasses import dataclass
import json
from pymongo import MongoClient
import sqlite3
from functions import get_current_project
from vars import CURRENT_PROJECT_FILE, DATA_DIR, JSON_READINGS_FILE, PROJECT_DIR, PROJECT_DIR_AUDIO, PROJECT_DIR_EXPORT, PROJECT_DIR_EXPORT_VERSES, PROJECT_DIR_EXPORT_CHAPTERS, PROJECT_CONFIG_FILE_NAME, PROJECT_DOWNLOADS_DIR, PROJECT_JSON_DIR, PROJECT_TEMP_DOWNLOADS_DIR, PROJECT_TRANSCRIPTS_DIR, PROJECT_TRANSCRIPTS_DIR, PROJECT_DOWNLOADS_DIR, PROJECT_TEMP_DOWNLOADS_DIR, PROJECT_CSV_DIR, CSV_SEGMENTS_FILE, CSV_SOURCES_FILE, CSV_SEARCHES_FILE

@dataclass
class Reference:
    book: str
    chapter: int
    verse: int
    content: str

@dataclass
class Reading:
    id: str
    start: float
    end: float

client = MongoClient('mongodb://localhost:27017/')
db = client['ephtc']
searches = db["searches"]
segments = db["segments"]

word_to_segments = {s["word"]: s["segments"] for s in searches.find({})}

book = "Ephesians"

# get Bible verses
bible_sqlite = "ESV.sqlite"
with open("./references.json", "r") as f:
    references = json.load(f)

def get_esv_content(book: str, chapter: int, verse: int) -> str:
    con = sqlite3.connect(bible_sqlite)
    cur = con.cursor()
    res = cur.execute(
        f"SELECT content FROM '{book}' WHERE chapter={chapter} AND verse={verse} ORDER BY verse ASC;")
    element = res.fetchone()
    # print(verse)
    return element[0]

def get_all_verses_and_content() -> list[Reference]:
    refs: list[Reference] = []
    for chapter, verses_in_chapter in enumerate(references[book]):
        if chapter == 0:
            continue
        for verse in range(1, verses_in_chapter + 1):
            content = get_esv_content(book, chapter, verse)
            ref = Reference(book, chapter, verse, content)
            refs.append(ref)
    return refs

def find_match(ref: Reference) -> list[Reading]:
    words = re.sub(r"[^A-z0-9 ]", "", ref.content.lower()).split(" ")
    size = len(words)
    reading_docs = []
    

    start_index = 0
    back_index = -1
    inc_start = False
    while len(reading_docs) == 0:
        start_word = words[start_index]
        end_word = words[back_index]
        start_segments = word_to_segments[start_word]
        end_segments = word_to_segments[end_word]
        reading_segment_ranges = [(s, s + size) for s in start_segments if s + size in end_segments]
        reading_segments = []
        for start_seg, end_seg in reading_segment_ranges:
            reading_segments.append(start_seg)
            reading_segments.append(end_seg)
        reading_docs = [r for r in (segments.find({
            "id": {
                "$in": reading_segments
            }
        }))]
        if inc_start:
            start_index += 1
        else:
            back_index -=1
        inc_start = not inc_start


    readings: list[Reading] = []
    for start_id, end_id in reading_segment_ranges:
        start_seg = next((doc for doc in reading_docs if doc["id"] == start_id), None)
        end_seg = next((doc for doc in reading_docs if doc["id"] == end_id), None)
        readings.append(
            Reading(
                start_seg["source"],
                start_seg["start"],
                end_seg["end"]
            )
        )

    return readings


def find_readings(ref: Reference) -> list[Reading]:
    # get words in verse
    words = re.sub(r"[^A-z0-9 ]", "", ref.content.lower()).split(" ")
    size = len(words)
    start_word = words[0]
    end_word = words[-1]
    start = searches.find_one({
        "word": start_word
    })
    end = searches.find_one({
        "word": end_word
    })
    reading_segment_ranges = [(s, s + size) for s in start["segments"] if s + size in end["segments"]]
    reading_segments = []
    for start_id, end_id in reading_segment_ranges:
        reading_segments.append(start_id)
        reading_segments.append(end_id)
    reading_docs = [r for r in (segments.find({
        "id": {
            "$in": reading_segments
        }
    }))]
    readings: list[Reading] = []
    for start_id, end_id in reading_segment_ranges:
        # start_seg = segments.find_one({"id": start_id})
        # end_seg = segments.find_one({"id": end_id})
        start_seg = next((doc for doc in reading_docs if doc["id"] == start_id), None)
        end_seg = next((doc for doc in reading_docs if doc["id"] == end_id), None)
        if start_seg is None or end_id is None:
            print({
                start_id,
                end_id,
                start_seg,
                end_seg
            })
        # end_seg = segments.find_one({"id": end_id})
        readings.append(
            Reading(
                start_seg["source"],
                start_seg["start"],
                end_seg["end"]
            )
        )

    return readings


def main():
    data = {}
    for ref in get_all_verses_and_content():
        full_ref = f"{ref.book} {ref.chapter}:{ref.verse}"
        if full_ref != "Ephesians 4:8":
            continue
        print(f"Finding '{full_ref}'")
        data[full_ref] = [reading.__dict__ for reading in find_readings(ref)]

    project_name = get_current_project()
    file = os.path.join(PROJECT_DIR, project_name, PROJECT_JSON_DIR, JSON_READINGS_FILE)
    with open(file, "w") as f:
        f.write(json.dumps(data, indent=2))


if __name__ == "__main__":
    main()
